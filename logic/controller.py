from datetime import datetime
from aiogram import types
from aiogram.types import callback_query, InlineKeyboardButton, InlineKeyboardMarkup

import const.classes
from db.db_connector import Database
from const.const import *
from . import markups
import re
from . import states
import random
from sqlalchemy import DateTime
from .utils import get_callback
from . import memory


class Controller:
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()

    async def command_start(self, message, state):
        await state.finish()
        name = message.from_user.first_name
        is_user_exist = self.db.is_user_exist(tg_id=message.from_user.id)
        markup = markups.start_markup(is_user_exist=is_user_exist)
        text = f'<b>–ü—Ä–∏–≤–µ—Ç, {name}! –≠—Ç–æ –Ω–∞—à –±–æ—Ç.\n–û–Ω —É–º–µ–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏ —Ç–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π, —á—Ç–æ–±—ã —Ç—ã –ø–æ–ª—É—á–∞–ª —Ç–µ ' \
               f'–ø–æ–¥–∞—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å.\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –ø–æ–ª—É—á–∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID.\n' \
               f'–ü–µ—Ä–µ–¥–∞–π –µ–≥–æ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º –∏ –æ–Ω–∏ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –ø–æ–¥–∞—Ä–∏—Ç—å' \
               f' —Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å!' \
               f'</b>'
        return dict(text=text, markup=markup)

    async def enter_friend_data(self, state):
        markup = markups.back_markup()
        text = '–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 6-—Ç–∏ –∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥—Ä—É–≥–∞:'
        await state.set_state(states.Friend.friend_id)
        return dict(text=text, markup=markup)

    async def search_friend(self, message, state):
        ids = self.db.get_ids()
        ids_lst = []
        for i in ids:
            for j in i:
                ids_lst.append(str(j))
        name_pattern = r'\d{6}$'
        if re.fullmatch(name_pattern, message.text) and message.text in ids_lst:
            async with state.proxy() as data:
                data['friend_id'] = message.text
                const.const.friend_id = message.text
                friend_data = self.db.get_friend_data(data['friend_id'])
                text = f'–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–∞—à –¥—Ä—É–≥?\n\n' \
                       f'–ò–º—è: {friend_data[0][0]}\n' \
                       f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {friend_data[0][1]}\n' \
                       f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {friend_data[0][2]}\n'
                markup = markups.yes_no()
        elif re.fullmatch(name_pattern, message.text) and message.text not in ids:
            text = '–í–∞—à –¥—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ, –ª–∏–±–æ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
            markup = markups.back_markup()
            await state.set_state(states.Friend.friend_id)
        else:
            text = '–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\nID —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Ü–∏—Ñ—Ä!'
            markup = markups.back_markup()
            await state.set_state(states.Friend.friend_id)
        await state.finish()
        return dict(text=text, markup=markup)

    async def get_friend_wishes(self, message):
        wishlist = self.db.get_friend_wishes(friend_id=const.const.friend_id)
        for wish in wishlist:
            gift_id = wish.pop('id')
            wish['is_reserved'] = 'üîí' if wish['is_reserved'] else 'üÜì'
            wish1 = [str(row) for row in wish.values() if row]
            wish1 = "\n".join(wish1)
            text = f'{wish1}'
            print(type(wish['name']), type(gift_id))
            book_gift_markup = markups.book_gift(wish_id=gift_id)
            await message.reply(text=text,
                                reply_markup=book_gift_markup,
                                parse_mode='HTML',
                                reply=False)
        markup = markups.back_markup()
        return dict(text='–ë—Ä–æ–Ω–∏—Ä—É–π –ø–æ–¥–∞—Ä–æ–∫ –∫–Ω–æ–ø–∫–∏.', markup=markup)

    async def enter_fullname(self, state):
        markup = markups.back_markup()
        text = '–í–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:'
        await state.set_state(states.User.fullname)
        return dict(text=text, markup=markup)

    async def get_name(self, message, state):
        name_pattern = r'[—ë–Å–ê-–Ø–∞-—è- A-za-z]+'
        if re.fullmatch(name_pattern, message.text):
            async with state.proxy() as data:
                data['fullname'] = message.text
                text = f'–ü—Ä–∏–≤–µ—Ç {data["fullname"]}. <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n–§–æ—Ä–º–∞—Ç –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã ' \
                       f'—Ä–æ–∂–¥–µ–Ω–∏—è: –î–î.–ú–ú.–ì–ì–ì–ì </b>.'
            markup = markups.back_set_name_markup()
            await state.set_state(states.User.birthdate)
        elif message.text == '–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏':
            markup = markups.back_markup()
            text = '–í–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:'
            await state.set_state(states.User.fullname)
        else:
            text = '–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å).'
            markup = None
        return dict(text=text, markup=markup)

    async def get_birthdate(self, message, state):
        date_pattern = r'.*'
        if message.text == '–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è':
            async with state.proxy() as data:
                text = f"<b>{data['fullname']}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –î–î.–ú–ú.–ì–ì–ì–ì</b>."
            markup = markups.back_set_name_markup()
            await state.set_state(states.User.birthdate)
        elif re.fullmatch(date_pattern, message.text):
            async with state.proxy() as data:
                try:
                    birthdate = datetime.strptime(message.text, r'%d.%m.%Y').date()
                    data['birthdate'] = birthdate
                    text = f'–î–µ–Ω—å —Ç–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["birthdate"]}\n ' \
                           f'–ö—Ä–∞—Å–∏–≤–æ–µ —á–∏—Å–ª–æ, —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ <b> \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: ' \
                           f'79001112233</b>.'
                    markup = markups.back_set_birthdate_markup()
                except ValueError:
                    text = '–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì'
                    markup = markups.back_set_name_markup()
                    await state.set_state(states.User.birthdate)
        await state.set_state(states.User.phone)
        return dict(text=text, markup=markup)

    async def get_phone(self, message, state):
        phone_pattern = r'^7\d{10}$'
        random_id = self.db.check_id()
        if message.text == '–ù–µ —Ö–æ—á—É –¥–∞–≤–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä!':
            async with state.proxy() as data:
                data['phone'] = None
                data['id'] = random_id
                text = f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã!\n\n {data['fullname']}\n " \
                       f"{data['birthdate']} \n\n–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {data['id']} \n\n" \
                       f" –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞? –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞?"

            await state.set_state(states.User.id)
            markup = markups.back_set_phone()
        elif re.fullmatch(phone_pattern, message.text):
            async with state.proxy() as data:
                data['phone'] = message.text
                data['id'] = random_id
                text = f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã!\n\n {data['fullname']},\n{data['birthdate']}\n {data['phone']} \n\n " \
                       f"–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {data['id']} \n\n" \
                       f"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞? –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞?"
            await state.set_state(states.User.id)
            markup = markups.back_set_phone()
        elif message.text == '–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
            async with state.proxy() as data:
                text = f' {data["fullname"]}\n ' \
                       f'<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...</b>.'
            markup = markups.back_set_birthdate_markup()
            await state.set_state(states.User.phone)
        else:
            text = '–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (79998887766 ...).'
            markup = markups.back_set_birthdate_markup()
        return dict(text=text, markup=markup)

    async def add_user_to_db(self, message, state):
        async with state.proxy() as data:
            user_data = dict(
                id=data['id'],
                fullname=data['fullname'],
                birthdate=data['birthdate'],
                phone=data['phone'],
                tg_id=message.from_user.id,
                tg_nickname=message.from_user.username,
            )
            self.db.add_user(user_data=user_data)
        await state.finish()

    async def get_wishes(self, message, state):
        wishlist = self.db.get_wishes(tg_id=message.from_user.id)
        random_id = self.db.check_id()
        for wish in wishlist:
            gift_id = wish.pop('id')
            wish['is_reserved'] = 'üîí' if wish['is_reserved'] else 'üÜì'
            wish1 = [str(row) for row in wish.values() if row]
            wish1 = "\n".join(wish1)
            text = f'{wish1}'
            print(type(wish['name']), type(gift_id))
            del_gift_markup = markups.del_gift(wish_id=gift_id)
            await message.reply(text=text,
                                reply_markup=del_gift_markup,
                                parse_mode='HTML',
                                reply=False)
        markup = markups.wishes_menu()
        return dict(text=f'–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {random_id}\n'
                         f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', markup=markup)

    async def create_wish_list(self, state):
        text = '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–Ω–∏–µ –∏ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤:'
        markup = markups.back_to_wishes_menu()
        await state.set_state(states.Gift.wish_name_to_add)
        return dict(text=text, markup=markup)

    async def add_point_in_list(self, message, state):
        wish_name = message.text
        tg_id = message.from_user.id
        wishlist_data = dict(
            name=wish_name,
            user_id=self.db.get_user_id(tg_id=tg_id)
        )
        self.db.add_gift(wishlist_data=wishlist_data)
        wishlist = self.db.get_wishes(tg_id=message.from_user.id)
        text = f'This is your wishlist:\n{wishlist}'
        for wish in wishlist:
            gift_id = wish.pop('id')
            wish['is_reserved'] = 'üîí' if wish['is_reserved'] else 'üÜì'
            del_gift_markup = markups.del_gift(wish_id=gift_id)
            wish = [str(row) for row in wish.values() if row]
            text = "\n".join(wish)
            await message.reply(text=text,
                                reply_markup=del_gift_markup,
                                parse_mode='HTML',
                                reply=False)
        markup = markups.wishes_menu()
        await state.finish()
        return dict(text='–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', markup=markup)

    async def del_point_from_list(self, query, wish_id):
        self.db.del_gift(gift_id=wish_id)
        wishlist = self.db.get_wishes(tg_id=query.from_user.id)
        for wish in wishlist:
            gift_id = wish.pop('id')
            wish['is_reserved'] = 'üîí' if wish['is_reserved'] else 'üÜì'
            del_gift_markup = markups.del_gift(wish_id=gift_id)
            wish = [str(row) for row in wish.values() if row]
            text = "\n".join(wish)
            await self.bot.send_message(chat_id=query.from_user.id,
                                        text=text,
                                        reply_markup=del_gift_markup)
        markup = markups.wishes_menu()
        text = '–ü–æ–¥–∞—Ä–æ–∫ —É–¥–∞–ª–µ–Ω'
        return dict(text=text, markup=markup)

    async def book_point_from_list(self, query, wish_id):
        self.db.book_gift(gift_id=wish_id)
        wishlist = self.db.get_friend_wishes(const.const.friend_id)
        for wish in wishlist:
            gift_id = wish.pop('id')
            wish['is_reserved'] = 'üîí' if wish['is_reserved'] else 'üÜì'
            book_gift_markup = markups.book_gift(wish_id=gift_id)
            wish = [str(row) for row in wish.values() if row]
            text = "\n".join(wish)
            await self.bot.send_message(chat_id=query.from_user.id,
                                        text=text,
                                        reply_markup=book_gift_markup)
        markup = back.markups()
        text = '–ü–æ–¥–∞—Ä–æ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω'
        return dict(text=text, markup=markup)
